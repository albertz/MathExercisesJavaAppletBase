VTMeta
======

Eigentlich ist VTMeta nur ein Element der aktuell mit Java programmierten Applets, aber es hat sich durchgebürgert, dass wir diese Applets die VTMeta-Applets nennen, da VTMeta meist das zentrale Element in diesen Applets ist.

Es gibt viele weitere wichtige Elemente in diesen Applets, auf die ich hier später kurz eingehe.


   Arbeit mit dem Code

Jedes Applet hat eine eigene Kopie vom VTMeta Code und auch von allen anderen Sachen. Es gibt keinen Code, den Applets sich teilen. Der Grund dafür war, dass ich es explizit vermeiden wollte, dass durch irgendwelche Änderungen in VTMeta alte Applets auf einmal anfangen, nicht mehr korrekt zu funktionieren.

Auf der anderen Seite habe ich versucht, bei neuen Elementen oder bei sonstigen Änderungen darauf zu achten, die Schnittstelle und das Verhalten an sich in etwa gleich zu halten, so dass es prinzipiell möglich ist, mit relativ geringem Aufwand die aktuelle VTMeta Klasse und auch anderen Code in einem älteren Applet zu benutzen - z.B. falls irgendwelche Fehler so korrigiert werden können.

Aufgrund dieser Organisation gibt es immer ein Applet, was den aktuellsten Code von VTMeta und auch allem anderen hat. Welches dieses Applet ist, steht immer in der Datei Funktionen.txt. Dieses Applet enthält selbst alle Funktionen (3D plotten, 2D plotten, Matrixen darstellen, usw.), allerdings werden lange nicht alle Funktionen angewendet. Die Funktionen.txt enthält genau eine Liste, wo man eine gute Beispielanwendung einer konkreten Funktion findet. Trotzdem sollte immer das aktuellste Applet als Basis für ein neues Applet dienen.

Will man nun ein neues Applet erstellen, sollte man am besten das aktuellste einfach kopieren, d.h. alle enthaltenen Dateien kopieren. Das geht am einfachsten mit Eclipse, denn die erste Zeile in dem Java Code enthält immer den Paketnamen (z.B. package applets.AnalytischeGeometrieundLA_01a_2DGeradenSchnittParallel;) und dieser muss natürlich angepasst werden, was Eclipse automatisch machen kann.

Ich selbst gehe immer genau so in Eclipse im Package Explorer vor (im Falle dass das Code Verzeichnis für die Lehreinheit bereits existiert):
* Neues Paket erstellen. Dazu Rechtsklick auf das Code-Verzeichnis der Lehreinheit -> New -> Package. Den Name des Pakets muss in der Form "applets.Lehreinheitname_irgendwas" sein. Lehreinheitname muss exakt dem Verzeichnisnamen der Lehreinheit entsprechen. Enthält der Lehreinheitname ein Leerzeichen (z.B. "Komplexe Zahlen"), muss dieses durch ein $ ersetzt werden (also "Komplexe$Zahlen"). Das "irgendwas" ist meistens eine Zahl gefolgt von einer ganz knappen Beschreibung (1-3 Wörter).
* Vom aktuellsten Applet das Paket aufklappen im Package Explorer und alle enthaltenen Dateien markieren. Dann via Drag&Drop die Dateien in das neu erstelle Paket kopieren. Wichtig ist beim Loslassen der Dateien die Taste Alt gleichzeitig zu drücken. Das nämlich kopiert die Dateien anstatt sie zu verschieben. Eclipse zeigt das an, indem es so ein "+" beim Mauszeiger anzeigt.

Eigentlich ist man nun fertig. Ich mache direkt schon ein SVN Commit an dieser Stelle (ohne eine wirkliche Änderung zu haben), damit ich die neue Codebasis zu diesem Status direkt im SVN hat. Das macht es sehr viel leichter, wenn man sehen will, was genau nun in diesem Applet neues gemacht wurde.

Das Code Verzeichnis erstellen im Package Explorer geht so (vorausgesetzt das Lehreinheits Verzeichnis existiert bereits):
* Rechtsklick auf Ilias (erster Eintrag im Package Explorer).
* New -> Source Folder
* Folder name: Lehreinheiten/XY/Code wobei XY die konkrete Lehreinheit ist



   Geschichte zum Code

Alle Java Applets im gesamten Ilias Projekt entstanden auf genau die Art und Weise, wie es oben beschrieben wurde. D.h. es gab immer ein Applet, an dem ich gearbeitet habe, wo ich Funktionen hinzugefügt habe etc., bis es fertig war. Für ein neues Applet habe ich nun dieses letzte und aktuellste Applet genommen, kopiert und mir weitere Funktionen hinzugefügt.

Auf diese Art und Weise ist der Code immer weiter gewachsen. Anfangs war es nur eine einzelne Datei, später wurde dieser Code unterteilt auf mehrere Dateien.

Bereits sehr früh entstand die Basisklasse VisualThing und verschiedene konkrete VT-Klassen auf dieser Basis. Das war z.B. VTLabel, VTText, VTButton und VTSelector. Alle diese Klassen entstanden für so grundlegende Applets, in denen es Text gab mit einigen auszufüllenden Stellen (entweder einfach eine Textbox oder eine Combobox) und am Ende eine Richtigkeitsüberprüfung mit entsprechender Rückmeldung. Evtl. auch noch eine Hilfefunktion. Die Idee dieser VT-Klassen war, dass die Anordnung der entsprechenden Java zugrundeliegenden Komponenten (JLabel, JText, usw.) automatisch erfolgt und ich mich nicht konkret darum mehr kümmern muss. Ich  musste nur noch ein Array von solchen VisualThing Objekten haben und der Rest ging automatisch. Das hat dann alles die Funktionn addVisualThings (im Moment findet man die in Applet.java) gemacht.

Später wurde mir das ganze Spezifizieren dieses VT-Objektarrays via Java zu umständlich (man siehe sich mal alte Applets an, wo es noch kein VTMeta gab, die das tun). Ich wollte eine Möglichkeit, wo ich einfach den Inhalt des Applets in einer Datei mit einer LateX ähnlichen Sprache definieren konnte. Aus dieser Idee entstand die VTMeta Klasse, die genau das tut. Sie bekommt als Eingabe diesen LateX ähnlichen Text und erstellt die ganzen VT-Objekte auf Basis des Textes (man siehe sich den Code mal an, eigentlich ist er relativ simpel). Das Applet selbst suchte nun nach dieser Inhalts-Datei (die ich content.vtmeta genannt habe), las sie ein und übergab den Rest an VTMeta.

VTMeta selbst ist nun die Basis für alle weiteren Applets. Später stellte sich heraus, dass es spezielle Fälle gibt, wo Java Code trotzdem einfacher zu handhaben war, als irgendwelcher LateX ähnlicher Code. Das ist vor allem dann der Fall, wenn es sich um sehr interaktive Elemente handelt, wie z.B. 2D oder 3D Darstellungen und die konkrete Spezifizierung der Objekte darin. So entstand die Datei Content.java (oder konkret die Klasse Content), die dafür gedacht ist, genau so etwas zu spezifizieren.

Mit der Zeit kamen dann weitere Komponenten hinzu. Lange Zeit gab es nichts außer VTButton, VTLabel, VTSelector und VTText. Es kamen dann später noch kleinere Elemente hinzu, die es ermöglichten, Brüche (VTFrac) oder ähnliches leicht darzustellen. PGraph, PZuweisung oder PGraph3D sind dann die sehr viel größeren Komponenten, die später hinzukamen.



   Code Übersicht

Man sollte am besten sich den Code bzw. die Klassenübersicht des aktuellsten Applets parallel zu diesem Dokument ansehen, um die Beschreibung besser nachvollziehen zu können.

In den meisten Fällen, wenn bereits alle Funktionen die man braucht vorhanden sind, muss man nichts weiter anpassen als die Dateien:
* content.vtmeta
* Content.java

  Content.java

Diese Klasse definiert die Größe des Applets und kann sonstige Umgebungsobjekte initialisieren und managen. Die Idee war, dass man in VTMeta via dem \object[meinobj] Objekte einbinden kann, die in dieser Content Klasse initialisiert und spezifiziert werden.

Mit der Zeit hat sich die Klasse noch um ein paar optionale Kleinigkeiten erweitert.

In der Klasse müssen dabei mindestens die folgenden Funktionen implementiert werden:
* Konstruktor Content(Applet applet)
* void init() mit applet.setSize(..,..)
  Diese Zeile wird automatisch ausgelesen von dem update_jars.sh Skript.
  Die Funktion wird ganz am Anfang aufgerufen.
* void postinit()
  Die Funktion wird ganz am Ende des initialen Ladevorgangs aufgerufen.
  Kann einfach leer gelassen werden.
* void next(int i)
  Gibt es ein "next"-Button, wird diese Funktion automatisch aufgerufen.
  Kann einfach leer gelassen werden.
* boolean isCorrect(int i, String sel)
  Diese Funktion führt eine benutzerdefinierte Richtigkeitsüberprüfung aus.
  i ist der Eingabe-Index.
  Kann einfach leer gelassen werden.
* void run()
  Wird während des Ladevorgangs aufgerufen, noch vor dem Laden der content.vtmeta. Hier geschieht üblicherweise das Spezifizieren der Objekte.

  Spezifizieren von Objekten

applet.vtmeta.setExtern ist die eigentliche zentrale Funktion hierbei. Sie bekommt ein Array von VisualThing als Parameter. Jedes VT-Objekt hat automatisch auch einen Namen (z.B. "meinobj") und kann über diesen Namen via der content.vtmeta an passender Stelle eingebunden werden.

Z.B.:

applet.vtmeta.setExtern(new VisualThing[] {
	new VTImage("graph", 10, 20, graph.W, graph.H, graph),
	new VTMatrix("A", 0, 0, new VisualThing[][] {
		new VisualThing[] { new VTLabel("A0", "www", 0, 0) },
		new VisualThing[] { new VTLabel("A1", "www", 0, 0) }
	}),
	new VTMatrix("B", 0, 0, new VisualThing[][] {
		new VisualThing[] { new VTLabel("B0", "www", 0, 0) },
		new VisualThing[] { new VTLabel("B1", "www", 0, 0) }
	})
});

Registriert 3 Objekte: "graph", "A" und "B". Ein entsprechender content.vtmeta Inhalt kann so aussehen:

Dies ist ein Test. Es gilt \m{x = \sqrt y} und \m{1 = 1}. Siehe hier:
\object[graph]
Und \m{p = \object[A]} und \m{u = \object[B]}.

  VT Klassen

Inzwischen gibt es eine ganze Reihe von VT Klassen. Da die meisten automatisch via VTMeta erzeugt werden, gehe ich hier nur ein bisschen näher auf diejenigen ein, die man eher/ausschließlich über die Content Klasse definiert.

Die restlichen Klassen sollten auch anhand des Namens selbsterklärend sein.

In allen Fällen gilt immer, die beste Referenz bieten andere vorhandene Beispiele dazu (man siehe Funktionen.txt oder suche einfach via Eclipse) und auch der Code der entsprechenden Klasse.

  VTImage

Dies ist die wichtigste Klasse in vielen Fällen außerhalb der Basisklassen. Alles, was in irgendeiner Form bildlich dargestellt wird, läuft über diese Klasse. Die Klasse selbst dient dabei nur für die Einbettung im VTMeta System und hat mit dem Zeichnen selbst nichts zu tun.

Für den konkreten Inhalt gibt es das PainterAndListener Interface. Für die genaue Spezifikation betrachte man die Deklaration.

In der Regel ist es aber nicht notwendig, einen PainterAndListener selbst zu implementieren, da es einige bereits sehr mächtige Objekte gibt, die das tun.

Da diese ansonsten nichts mit VTImage zu tun haben, gehe ich erst später auf die konkreten bereits vorhandenen PainterAndListener ein. Das sind z.B. alle Funktionen zur 2D und 3D Darstellung.

Im obigen Beispiel wird so ein VTImage Objekt erstellt. Der letzte Parameter graph im Beispiel ist dabei ein PainterAndListener Objekt (das nicht im Beispiel definiert wurde, man siehe dazu anderen Beispielcode).

  VTContainer

Kann mehrere VT Objekte zusammenfassen zu einem Oberobjekt. Das kann nützlich sein, wenn man z.B. eine ganze Gruppe von Objekten (un)sichtbar machen will.

  VTMatrix

Ist im Prinzip ein etwas komplexerer VTContainer, der Objekte in Matrix Form anordnen kann.

  VTMeta / content.vtmeta

Das ist, wie bereits beschrieben, die Klasse, die für den Inhalt der content.vtmeta benutzt wird. Die Klasse selbst ist wie eine Art VTContainer.

Für eine Übersicht der Sprache siehe man die Datei
 VTMeta content.vtmeta Beschreibungssprache.txt 
oder für eine genaue Spezifikation einfach den Code selbst (der leicht verständlich ist).

  PainterAndListener Klassen

Wie bereits beschrieben, sind das die eigentlichen Implementationen für grafische Darstellungen, die via VTImage im VTMeta System eingebunden werden können.

Alle P-Klassen sind solche Implementationen.

In allen Fällen gilt wieder, sich am besten konkrete Beispielimplementationen anzusehen (via Funktionen.txt oder Eclipse Suche zu finden).

Generell gilt auch, jegliche grafische Darstellungen in diesen VTMeta Applets benutzen eine dieser Klassen. Aus dem Blickwinkel, wenn man sich die Applets selbst ansieht, wird deutlich, wie dynamisch man diese Klassen anwenden kann.

  PGraph

Diese Klasse dient zum Plotten von beliebigen Funktionen im 2D Raum. Auch das Auswählen von bestimmten X/Y Punkten auf einer Funktion oder im beliebigen 2D Raum ist möglich und kann beliebig angepasst werden.

  PGraph3D

Das ist im Moment die neueste dieser Klassen.

Mit ihr sind beliebige 3D Darstellung möglich. Auch Funktionen zum Bewegen von Punkten im 3D Raum sind möglich.

Das mächtigste Element von diesem PGraph3D Framework ist die Möglichkeit, Punkte/Geometrieobjekte dynamisch auf Basis von Berechnungen (z.B. Kreuzprodukt, Schnittpunkt, oder ähnliches) zu erzeugen. Hat man eine Linie so auf Basis von 2 Punkten definiert und eine andere Linie entsprechend und nun einen dynamischen Punkt als Schnittpunkt dieser beiden Linien und bewegt man einen der Linienendpunkte, so bewegt sich auch automatisch der dynamische Schnittpunkt. Entsprechendes hat man auch bei der Schnittgeraden zweier Ebenen. Und jede andere beliebige Verknüpfung ist möglich.

Die Objekte von PGraph3D sind Punkte, beschränkte Linien, unendliche Linien, Vektoren (im Prinzip beschränkte Linien mit einem Pfeil am Ende), Ebenen und Texte.

  PZuweisung[Extended[2]]

Alle diese Klassen dienen für die Zuweisungsdiagramme, wo zwei Mengen als Menge von Punkten dargestellt werden und man Verknüpfungen dieser beiden Mengen definieren kann.
